plugins {
    id("java-library")
    id("checkstyle")
    id("eclipse")
    id("jacoco")
    id("maven-publish")
    id("pmd")
    id("ru.vyarus.animalsniffer") version "1.5.4"
    id("me.champeau.gradle.jmh") version "0.5.3"
    id("com.github.hierynomus.license") version "0.16.1"
    id("biz.aQute.bnd.builder") version "6.3.0"
    id("com.vanniktech.maven.publish") version "0.19.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = "com.github.akarnokd" 
ext.githubProjectName = 'RxJavaExtensions'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/groups/public' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}

dependencies {
    signature 'org.codehaus.mojo.signature:java18:1.0@signature'

    api "org.reactivestreams:reactive-streams:1.0.4"
    api "io.reactivex.rxjava3:rxjava:3.1.5"

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    testImplementation 'org.mockito:mockito-core:4.6.1'
}

apply plugin: 'biz.aQute.bnd.builder'

jar {
    bnd ('Bundle-Name': 'rxjava3-extensions',
            'Bundle-Vendor': 'akarnokd',
            'Bundle-Description': 'RxJava 3.x extra sources, operators and components and ports of many 1.x companion libraries.',
            'Import-Package': '!org.junit,!junit.framework,!org.mockito.*,*',
            'Bundle-DocURL': 'https://github.com/akarnokd/RxJavaExtensions')
}

checkstyle {
    configFile = project.file("config/checkstyle/checkstyle.xml")
    configProperties = [
            "checkstyle.suppressions.file": project.file("config/checkstyle/suppressions.xml"),
            "checkstyle.header.file"      : project.file("config/license/HEADER_JAVA")
    ]
}

apply plugin: "com.vanniktech.maven.publish"

jmh {
    jmhVersion = '1.21'
    humanOutputFile = null
    if (project.hasProperty('jmh')) {
        include = ".*" + project.jmh + ".*"
    } else {
        include = ".*"
    }
}

plugins.withType(EclipsePlugin) {
    project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}

javadoc {
    failOnError = false
    options.stylesheetFile = new File(projectDir, "gradle/stylesheet.css");
    
    options.links(
        "https://docs.oracle.com/javase/7/docs/api/",
        "http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
        "http://reactivex.io/RxJava/3.x/javadoc/"
    )
    
}

test {
    maxHeapSize = "2g"
    testLogging  {
        events "started", "failed" // "skipped", "passed"
    //    showStandardStreams = true
      exceptionFormat="full"
    }
}

license {
    header rootProject.file('config/license/HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    ignoreFailures true
    excludes(["**/*.md", "**/*.txt"])
}

jacoco {
    toolVersion = '0.8.5' // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

build.dependsOn jacocoTestReport

check.dependsOn jacocoTestReport

pmd {
    toolVersion = '6.21.0'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    ruleSets = []
    ruleSetFiles = files('pmd.xml')
}

pmdMain {
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

task pmdPrint(dependsOn: 'pmdMain') doLast {
    File file = rootProject.file('build/reports/pmd/main.xml')
    if (file.exists()) {

        println("Listing first 100 PMD violations")

        file.eachLine { line, count ->
            if (count <= 100) {
               println(line)
            }
        }

    } else {
        println("PMD file not found.")
    }
}

build.dependsOn pmdPrint
check.dependsOn pmdPrint

animalsniffer {
    annotation = 'io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer'
}
